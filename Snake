#include <windows.h>
#include <time.h>

#define WIDTH 50
#define HEIGHT 25
#define CELL_SIZE 20
#define TIMER_ID 1


HWND hwnd;
HBRUSH hbrBackground, hbrSnake, hbrFood, hbrWall;
RECT snake[WIDTH * HEIGHT], food;
int direction, score, speed;
bool gameOver;


void Setup();
void Draw(HDC hdc);
void MoveSnake();
void GenerateFood();
void GameOver();
LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
    WNDCLASS wc = { 0 };
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.hbrBackground = (HBRUSH)COLOR_WINDOW;
    wc.lpszClassName = TEXT("SnakeWindowClass");

    RegisterClass(&wc);

    hwnd = CreateWindowEx(
        0,
        TEXT("SnakeWindowClass"),
        TEXT("Snake Game"),
        WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_MINIMIZEBOX,
        CW_USEDEFAULT, CW_USEDEFAULT,
        WIDTH * CELL_SIZE + 16, HEIGHT * CELL_SIZE + 39,
        NULL,
        NULL,
        hInstance,
        NULL
    );

    ShowWindow(hwnd, nCmdShow);

    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return 0;
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    switch (uMsg) {
    case WM_CREATE:
        Setup();
        SetTimer(hwnd, TIMER_ID, 200, NULL); // Initial speed
        break;
    case WM_PAINT:
        PAINTSTRUCT ps;
        HDC hdc;
        hdc = BeginPaint(hwnd, &ps);
        Draw(hdc);
        EndPaint(hwnd, &ps);
        break;
    case WM_KEYDOWN:
        switch (wParam) {
        case VK_LEFT:
            if (direction != VK_RIGHT)
                direction = VK_LEFT;
            break;
        case VK_RIGHT:
            if (direction != VK_LEFT)
                direction = VK_RIGHT;
            break;
        case VK_UP:
            if (direction != VK_DOWN)
                direction = VK_UP;
            break;
        case VK_DOWN:
            if (direction != VK_UP)
                direction = VK_DOWN;
            break;
        }
        break;
    case WM_TIMER:
        if (!gameOver) {
            MoveSnake();
            if (snake[0].left == food.left && snake[0].top == food.top) {
                score += 10;
                GenerateFood();
                if (speed > 50)  // Speed up every 100 points
                    speed -= 5;
                SetTimer(hwnd, TIMER_ID, speed, NULL);
            }
            InvalidateRect(hwnd, NULL, TRUE);
        }
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        KillTimer(hwnd, TIMER_ID);
        break;
    default:
        return DefWindowProc(hwnd, uMsg, wParam, lParam);
    }
    return 0;
}

void Setup() {
    srand((unsigned)time(NULL));
    hbrBackground = CreateSolidBrush(RGB(0, 128, 0)); // Green background
    hbrSnake = CreateSolidBrush(RGB(255, 255, 0));    // Yellow snake
    hbrFood = CreateSolidBrush(RGB(255, 0, 0));       // Red food
    hbrWall = CreateSolidBrush(RGB(139, 69, 19));     // Brown walls
    direction = VK_RIGHT;
    score = 0;
    speed = 200;
    gameOver = false;
    snake[0].left = 4 * CELL_SIZE;
    snake[0].top = 4 * CELL_SIZE;
    snake[0].right = snake[0].left + CELL_SIZE;
    snake[0].bottom = snake[0].top + CELL_SIZE;
    GenerateFood();
}

void Draw(HDC hdc) {
    SelectObject(hdc, hbrBackground);
    Rectangle(hdc, 0, 0, WIDTH * CELL_SIZE, HEIGHT * CELL_SIZE);

    SelectObject(hdc, hbrFood);
    Rectangle(hdc, food.left, food.top, food.right, food.bottom);

    SelectObject(hdc, hbrSnake);
    for (int i = 0; i < score / 10 + 1; i++) {
        Rectangle(hdc, snake[i].left, snake[i].top, snake[i].right, snake[i].bottom);
    }

    SelectObject(hdc, hbrWall);
    Rectangle(hdc, 0, 0, WIDTH * CELL_SIZE, CELL_SIZE); // Top wall
    Rectangle(hdc, 0, 0, CELL_SIZE, HEIGHT * CELL_SIZE); // Left wall
    Rectangle(hdc, 0, (HEIGHT - 1) * CELL_SIZE, WIDTH * CELL_SIZE, HEIGHT * CELL_SIZE); // Bottom wall
    Rectangle(hdc, (WIDTH - 1) * CELL_SIZE, 0, WIDTH * CELL_SIZE, HEIGHT * CELL_SIZE); // Right wall

    // Display score
    SetTextColor(hdc, RGB(255, 255, 255));
    SetBkMode(hdc, TRANSPARENT);
    TCHAR scoreText[20];
    wsprintf(scoreText, TEXT("Score: %d"), score);
    TextOut(hdc, 10, 10, scoreText, lstrlen(scoreText) * sizeof(TCHAR));
}

void MoveSnake() {
    for (int i = score / 10; i > 0; i--) {
        snake[i] = snake[i - 1];
    }
    switch (direction) {
    case VK_LEFT:
        snake[0].left -= CELL_SIZE;
        snake[0].right -= CELL_SIZE;
        break;
    case VK_RIGHT:
        snake[0].left += CELL_SIZE;
        snake[0].right += CELL_SIZE;
        break;
    case VK_UP:
        snake[0].top -= CELL_SIZE;
        snake[0].bottom -= CELL_SIZE;
        break;
    case VK_DOWN:
        snake[0].top += CELL_SIZE;
        snake[0].bottom += CELL_SIZE;
        break;
    }

    // Check collision with walls
    if (snake[0].left < CELL_SIZE || snake[0].right >= (WIDTH - 1) * CELL_SIZE ||
        snake[0].top < CELL_SIZE || snake[0].bottom >= (HEIGHT - 1) * CELL_SIZE) {
        GameOver();
        return;
    }

    
    for (int i = 1; i < score / 10 + 1; i++) {
        if (snake[0].left == snake[i].left && snake[0].top == snake[i].top) {
            GameOver();
            return;
        }
    }
}

void GenerateFood() {
    food.left = (rand() % (WIDTH - 2) + 1) * CELL_SIZE;
    food.top = (rand() % (HEIGHT - 2) + 1) * CELL_SIZE;
    food.right = food.left + CELL_SIZE;
    food.bottom = food.top + CELL_SIZE;
}

void GameOver() {
    if (!gameOver) {
        MessageBox(hwnd, TEXT("Game Over!"), TEXT("Snake Game"), MB_OK);
        gameOver = true;
        score = 0;
        speed = 200;
        KillTimer(hwnd, TIMER_ID);
        Setup();
    }
}

